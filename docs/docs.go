// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "artorison@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/segments": {
            "get": {
                "description": "Fetches a list of all segments stored in the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Retrieve all segments",
                "responses": {
                    "200": {
                        "description": "List of segments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Segments"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve segments",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new segment to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Create a new segment",
                "parameters": [
                    {
                        "description": "Segment data",
                        "name": "segment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SegmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Segment created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to create segment",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a segment from the system using the provided slug.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Delete a segment",
                "parameters": [
                    {
                        "description": "Segment data",
                        "name": "segment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SegmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Segment deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete segment",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        },
        "/user_segments": {
            "get": {
                "description": "Fetches all user-to-segment mappings stored in the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSegments"
                ],
                "summary": "Retrieve all user-segment relationships",
                "responses": {
                    "200": {
                        "description": "List of user-segment relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserSegment"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve user segments",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Adds or removes segments associated with a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSegments"
                ],
                "summary": "Update a user's segments",
                "parameters": [
                    {
                        "description": "Segments to add or remove",
                        "name": "userSegment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSegmentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User segments updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to update user segments",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        },
        "/user_segments/history/{user_id}": {
            "get": {
                "description": "Generate a CSV file containing the user's segment history for a specific month.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "UserSegmentHistory"
                ],
                "summary": "Generate User History CSV",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Year-Month in YYYY-MM format",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL to the generated CSV file",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user_segments/{user_id}": {
            "get": {
                "description": "Retrieves all segments associated with a user by user ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSegments"
                ],
                "summary": "Get segments for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user segments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserSegment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve user segments",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves all users from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Users"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve users",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new user to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Removes a user from the database by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Response": {
            "description": "Standard response structure.",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data"
                },
                "message": {
                    "description": "Message",
                    "type": "string"
                }
            }
        },
        "models.ResponseError": {
            "description": "Error response structure.",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error type",
                    "type": "string"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP status code",
                    "type": "integer"
                }
            }
        },
        "models.SegmentRequest": {
            "type": "object",
            "properties": {
                "slug": {
                    "description": "segment name",
                    "type": "string",
                    "example": "DISCOUNT_30"
                }
            }
        },
        "models.Segments": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "models.UpdateSegmentsRequest": {
            "description": "Request payload for updating a user's associated segments.",
            "type": "object",
            "properties": {
                "add_segments": {
                    "description": "Segments to add",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"VOICE_MESSAGES\"]"
                    ]
                },
                "delete_segments": {
                    "description": "Segments to delete",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"CHAT_SUPPORT\"]"
                    ]
                },
                "ttl": {
                    "description": "TTL default NULL",
                    "type": "string"
                },
                "user_id": {
                    "description": "User's unique ID",
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.UserSegment": {
            "description": "Model representing a relationship between a user and a segment.",
            "type": "object",
            "properties": {
                "segments": {
                    "description": "Associated segment",
                    "type": "string"
                },
                "user_id": {
                    "description": "User's unique ID",
                    "type": "integer"
                }
            }
        },
        "models.Users": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "User's name",
                    "type": "string"
                },
                "user_id": {
                    "description": "User's unique ID",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Dynamic User Groups API",
	Description:      "API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
