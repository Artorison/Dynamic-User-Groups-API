// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	models "API/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CheckUserExists provides a mock function with given fields: userID
func (_m *UserRepository) CheckUserExists(userID int64) (bool, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserDB provides a mock function with given fields: user
func (_m *UserRepository) CreateUserDB(user *models.Users) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserDB provides a mock function with given fields: userID
func (_m *UserRepository) DeleteUserDB(userID int64) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsersDB provides a mock function with no fields
func (_m *UserRepository) GetAllUsersDB() ([]models.Users, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsersDB")
	}

	var r0 []models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Users, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Users)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
