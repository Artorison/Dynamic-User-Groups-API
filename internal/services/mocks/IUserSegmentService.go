// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	models "API/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IUserSegmentService is an autogenerated mock type for the IUserSegmentService type
type IUserSegmentService struct {
	mock.Mock
}

// DeleteUserSegment provides a mock function with given fields: userID, slug
func (_m *IUserSegmentService) DeleteUserSegment(userID int64, slug models.Slug) error {
	ret := _m.Called(userID, slug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.Slug) error); ok {
		r0 = rf(userID, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserSegments provides a mock function with no fields
func (_m *IUserSegmentService) GetAllUserSegments() ([]models.UserSegment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserSegments")
	}

	var r0 []models.UserSegment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.UserSegment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.UserSegment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSegment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSegments provides a mock function with given fields: userID
func (_m *IUserSegmentService) GetUserSegments(userID int64) (models.UserSegments, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSegments")
	}

	var r0 models.UserSegments
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.UserSegments, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) models.UserSegments); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.UserSegments)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSegments provides a mock function with given fields: userID, slugsToAdd, slugsToDelete, ttl
func (_m *IUserSegmentService) UpdateUserSegments(userID int64, slugsToAdd []models.Slug, slugsToDelete []models.Slug, ttl *time.Time) error {
	ret := _m.Called(userID, slugsToAdd, slugsToDelete, ttl)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSegments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []models.Slug, []models.Slug, *time.Time) error); ok {
		r0 = rf(userID, slugsToAdd, slugsToDelete, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserSegmentService creates a new instance of IUserSegmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserSegmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserSegmentService {
	mock := &IUserSegmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
