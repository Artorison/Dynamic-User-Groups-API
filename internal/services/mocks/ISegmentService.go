// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	models "API/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ISegmentService is an autogenerated mock type for the ISegmentService type
type ISegmentService struct {
	mock.Mock
}

// CreateSegment provides a mock function with given fields: slug
func (_m *ISegmentService) CreateSegment(slug models.Slug) error {
	ret := _m.Called(slug)

	if len(ret) == 0 {
		panic("no return value specified for CreateSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Slug) error); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSegment provides a mock function with given fields: slug
func (_m *ISegmentService) DeleteSegment(slug models.Slug) error {
	ret := _m.Called(slug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Slug) error); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSegments provides a mock function with no fields
func (_m *ISegmentService) GetAllSegments() ([]models.Segments, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSegments")
	}

	var r0 []models.Segments
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Segments, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Segments); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Segments)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISegmentService creates a new instance of ISegmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISegmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISegmentService {
	mock := &ISegmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
